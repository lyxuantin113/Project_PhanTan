package gui;

import java.awt.BorderLayout;

import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.print.PrinterJob;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.print.PrintService;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

import org.apache.poi.sl.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;

import dao.ChiTietPhieuNhapThuoc_Dao;
import dao.PhieuNhapThuoc_Dao;
import dao.Thuoc_Dao;
import dao.impl.ChiTietPhieuNhapThuoc_Impl;
import dao.impl.PhieuNhapThuoc_Impl;
import dao.impl.Thuoc_Impl;
//import db.ConnectDB;
import entity.ChiTietPhieuNhapThuoc;
import entity.PhieuNhapThuoc;
import entity.Thuoc;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.time.LocalDate;

import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPRow;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import org.apache.poi.ss.usermodel.*;

import dao.PhieuNhapThuoc_Dao;

public class DanhSachPhieuNhapThuoc_Gui extends JPanel implements ActionListener, MouseListener {

	private JTable table;
	private JTable table2;
	private JButton btnDaNhan;
	private JButton btnIn;
	private JButton btnInChiTiet;
	private AbstractButton btnLamMoi;

	public DanhSachPhieuNhapThuoc_Gui() throws RemoteException {
		setSize(1070, 600);
		setVisible(true);

		JPanel pnMain = new JPanel();
		pnMain.setLayout(new BorderLayout());

		// HEADER
		JPanel pnHead = new JPanel();
		JLabel lblHead = new JLabel("Danh sách phiếu nhập thuốc");
		Font fo20 = new Font("Times New Roman", Font.BOLD, 20);
		lblHead.setFont(fo20);
		lblHead.setForeground(Color.blue);
		pnHead.add(lblHead);

		pnMain.add(pnHead, BorderLayout.NORTH);
		// Center
		JPanel pnCenter = new JPanel();
		pnCenter.setLayout(new BoxLayout(pnCenter, BoxLayout.Y_AXIS));
		JPanel pnCenterTop = new JPanel();
		pnCenterTop.setLayout(new BoxLayout(pnCenterTop, BoxLayout.Y_AXIS));
		JPanel pnCenterBot = new JPanel();
		pnCenterBot.setLayout(new BoxLayout(pnCenterBot, BoxLayout.Y_AXIS));

		// Table
		String[] headers = { "Mã phiếu nhập", "Ngày nhập", "Nhân viên", "Nhà cung cấp", "Tổng tiền", "Trạng thái" };
		DefaultTableModel model = new DefaultTableModel(headers, 0);
		table = new JTable(model);
		table.setPreferredScrollableViewportSize(new java.awt.Dimension(1000, 200));
		JScrollPane sp = new JScrollPane(table);
		pnCenterTop.add(sp);
		// Button
		JPanel pnButton = new JPanel();
		btnDaNhan = new JButton("Đã nhận");
		btnDaNhan.setCursor(new Cursor(Cursor.HAND_CURSOR));
		btnDaNhan.setBackground(new Color(0, 160, 255));
		btnIn = new JButton("In");
		btnIn.setCursor(new Cursor(Cursor.HAND_CURSOR));
		btnIn.setBackground(new Color(0, 160, 255));
		btnLamMoi = new JButton("Làm mới");
		btnLamMoi.setCursor(new Cursor(Cursor.HAND_CURSOR));
		btnLamMoi.setBackground(new Color(0, 160, 255));

		pnButton.add(btnDaNhan);
		pnButton.add(btnIn);
		pnButton.add(btnLamMoi);

		pnCenterTop.add(pnButton);
		// Table danh sách thuốc trong phiếu nhập
		String[] headers2 = { "Mã thuốc", "Số lượng", "Giá nhập", "Hạn sử dụng", "Đơn vị", "Thành tiền", "Mã CTPNT" };
		DefaultTableModel model2 = new DefaultTableModel(headers2, 0);
		table2 = new JTable(model2);
		table2.setPreferredScrollableViewportSize(new java.awt.Dimension(1000, 200));
		JScrollPane sp2 = new JScrollPane(table2);
		pnCenterBot.add(sp2);
		pnCenterBot.setBorder(BorderFactory.createTitledBorder("Danh sách thuốc trong phiếu nhập thuốc"));

		pnCenter.add(pnCenterTop);
		pnCenter.add(pnCenterBot);
		pnMain.add(pnCenter, BorderLayout.CENTER);

		// Footer
		JPanel pnFoot = new JPanel();
		btnInChiTiet = new JButton("In chi tiết");
		btnInChiTiet.setCursor(new Cursor(Cursor.HAND_CURSOR));
		btnInChiTiet.setBackground(new Color(0, 160, 255));
		pnFoot.add(btnInChiTiet);
		pnMain.add(pnFoot, BorderLayout.SOUTH);

		add(pnMain);
		// Action
		btnDaNhan.addActionListener(this);
		btnIn.addActionListener(this);
		btnInChiTiet.addActionListener(this);
		btnLamMoi.addActionListener(this);

		// Hiển thị danh sách phiếu nhập
		hienTable();
//		ConnectDB.connect();
		table.addMouseListener(this);

	}

	private void hienTable() throws RemoteException{
		DefaultTableModel model = (DefaultTableModel) table.getModel();
		model.setRowCount(0);
		// Lấy danh sách phiếu nhập từ database
		PhieuNhapThuoc_Dao pntDao = new PhieuNhapThuoc_Impl();
		List<PhieuNhapThuoc> dsPNT = pntDao.readFromTableSort();
		for (PhieuNhapThuoc pnt : dsPNT) {
			Object[] rowData = new Object[6];
			rowData[0] = pnt.getMaPhieuNhap();
			rowData[1] = pnt.getNgayNhap();
			rowData[2] = pnt.getMaNV().getMaNhanVien();
			rowData[3] = pnt.getMaNCC().getTenNCC();
			rowData[4] = pnt.getTongTien();
			rowData[5] = pnt.getTrangThai();
			model.addRow(rowData);
		}

	}

	@Override
	public void actionPerformed(ActionEvent e) {
		Object o = e.getSource();
		if (o.equals(btnDaNhan)) {
			if (checkDaNhan() == false) {
				return;
			}
			int hoiNhac = JOptionPane.showConfirmDialog(this, "Bạn chắc chắn đã nhận thuốc?");
			if (hoiNhac == JOptionPane.YES_OPTION) {
				// Đánh dấu phiếu nhập đã nhận
				int row = table.getSelectedRow();
				String maPhieuNhap = table.getValueAt(row, 0).toString();
				PhieuNhapThuoc_Dao pntDao = null;
				ChiTietPhieuNhapThuoc_Dao ctPNTDao = null;
				Thuoc_Dao thuocDao = null;
				try {
					ctPNTDao = new ChiTietPhieuNhapThuoc_Impl();
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				try {
					thuocDao = new Thuoc_Impl();
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				try {
					pntDao = new PhieuNhapThuoc_Impl();
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				pntDao.updateTrangThai(maPhieuNhap);

				// Update thông tin thuốc trong kho
				List<ChiTietPhieuNhapThuoc> dsCTPNT = ctPNTDao.readFromTable(maPhieuNhap);
				List<Thuoc> dsThuoc = thuocDao.findAll();
				for (ChiTietPhieuNhapThuoc ctPNT : dsCTPNT) {
					for (Thuoc thuoc : dsThuoc) {
						if (ctPNT.getMaThuoc().getMaThuoc().equals(thuoc.getMaThuoc())) {
							int soLuongTon = thuoc.getSoLuongTon() + ctPNT.getSoLuong();
							thuoc.setSoLuongTon(soLuongTon);
						}
					}
				}
				// Cập nhật lại thông tin thuốc trong database
				for (Thuoc thuoc : dsThuoc) {
					thuocDao.updateTTThuoc(thuoc);
				}
				DSThuoc_Gui thuocGui = null;
				try {
					thuocGui = new DSThuoc_Gui();
					thuocGui.hienTable();
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}

				try {
					hienTable();
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}

		}
		if (o.equals(btnIn)) {
			// In danh sách phiếu nhập
//			inPhieuNhap(table, "data/DanhSachPhieuNhap.xlsx");
			
			try {
				// Lấy mã phiếu nhập
				int row1 = table.getSelectedRow();
				if (row1 == -1) {
					JOptionPane.showMessageDialog(this, "Chọn phiếu nhập cần in!");
					return;
				}
				// Lấy tên nhà cung cấp
				String tenNCC = table.getValueAt(row1, 3).toString();
				
				String maPhieuNhap = table.getValueAt(row1, 0).toString();
				// Tạo tài liệu in
				String urlFont = System.getProperty("user.dir") + "\\lib\\Arial Unicode MS.ttf";
				BaseFont unicodeFont = BaseFont.createFont(urlFont, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
				com.itextpdf.text.Font unicodeFontObject = new com.itextpdf.text.Font(unicodeFont, 12);
				Document document = new Document();
				document.setMargins(50, 50, 10, 0);
				// Nơi lưu file
				String url = "";
				url = System.getProperty("user.dir") + "\\fileOutput\\";
				url +=  maPhieuNhap + ".pdf";
				String filename = url;
				PdfWriter.getInstance(document, new FileOutputStream(filename));
				document.open();
				// Tiêu đề
				String tenQuan = "NHÀ THUỐC TTV";
				Paragraph ten = new Paragraph(tenQuan, new com.itextpdf.text.Font(unicodeFont, 20, com.itextpdf.text.Font.BOLD));
				ten.setAlignment(Element.ALIGN_CENTER);
				document.add(ten);
				String diaChi = "Đường số 28 Phường 6 Gò Vấp Thành phố Hồ Chí Minh\n";
				Paragraph dc = new Paragraph(diaChi, unicodeFontObject);
				dc.setAlignment(Element.ALIGN_CENTER);
				document.add(dc);
				Paragraph hoaDonThanhToan = new Paragraph("\n\nPHIẾU NHẬP THUỐC",
						new com.itextpdf.text.Font(unicodeFont, 20, com.itextpdf.text.Font.BOLD));
				Paragraph dong = new Paragraph("********************************", unicodeFontObject);
				hoaDonThanhToan.setAlignment(Element.ALIGN_CENTER);
				document.add(hoaDonThanhToan);
				dong.setAlignment(Element.ALIGN_CENTER);
				document.add(dong);

				// thông tin phiếu và nhà cung cấp
				String ngayTao = LocalDate.now().toString();
				Paragraph ngay = new Paragraph("Ngày :" + ngayTao, unicodeFontObject);
				ngay.setAlignment(Element.ALIGN_RIGHT);
				document.add(ngay);
				String ma = "Mã phiếu: " + maPhieuNhap;
				String ncc = "Nhà cung cấp: " + tenNCC ;
				Paragraph nv = new Paragraph(ma, unicodeFontObject);
				nv.setAlignment(Element.ALIGN_LEFT);
				Paragraph kh1 = new Paragraph(ncc, unicodeFontObject);
				kh1.setAlignment(Element.ALIGN_LEFT);
				document.add(nv);
				document.add(kh1);
				document.add(Chunk.NEWLINE);
				Paragraph dong2 = new Paragraph("Thông Tin Hóa Đơn*",
						new com.itextpdf.text.Font(unicodeFont, 10, com.itextpdf.text.Font.BOLD));
				dong2.setAlignment(Element.ALIGN_CENTER);
				document.add(dong2);
				document.add(Chunk.NEWLINE);

				// tạo bảng
				PdfPTable table = new PdfPTable(6);
				table.setTotalWidth(new float[] { 100f, 70f,70f, 60f, 50f, 70f });
				table.setWidthPercentage(100);
				// Thêm tiêu đề cho bảng
//				String[] headers2 = { "Mã thuốc", "Số lượng", "Giá nhập", "Hạn sử dụng", "Đơn vị", "Thành tiền", "Mã CTPNT" };
				table.addCell(new PdfPCell(new Phrase("Mã thuốc", unicodeFontObject)));
				table.addCell(new PdfPCell(new Phrase("Hạn sử dụng", unicodeFontObject)));
				table.addCell(new PdfPCell(new Phrase("Số lượng", unicodeFontObject)));
				table.addCell(new PdfPCell(new Phrase("Giá nhập", unicodeFontObject)));
				table.addCell(new PdfPCell(new Phrase("Đơn vị", unicodeFontObject)));
				table.addCell(new PdfPCell(new Phrase("Thành tiền", unicodeFontObject)));
				// Thêm dữ liệu
				DefaultTableModel model = (DefaultTableModel) table2.getModel();
				for (int i = 0; i < model.getRowCount(); i++) {
					String maThuoc = model.getValueAt(i, 0).toString();
					String hsd = model.getValueAt(i, 3).toString();
					String soluong = model.getValueAt(i, 1).toString();
					String giaNhap = model.getValueAt(i, 2).toString();
					String donVi = model.getValueAt(i, 4).toString();
					String thanhTien = model.getValueAt(i, 5).toString();
					table.addCell(new PdfPCell(new Paragraph(maThuoc, unicodeFontObject)));
					table.addCell(new PdfPCell(new Paragraph(hsd, unicodeFontObject)));
					table.addCell(new PdfPCell(new Paragraph(soluong, unicodeFontObject)));
					table.addCell(new PdfPCell(new Paragraph(giaNhap, unicodeFontObject)));
					table.addCell(new PdfPCell(new Paragraph(donVi, unicodeFontObject)));
					table.addCell(new PdfPCell(new Paragraph(thanhTien, unicodeFontObject)));
				}
				for (PdfPRow row : table.getRows()) {
					for (PdfPCell cell : row.getCells()) {
						cell.setBorder(Rectangle.NO_BORDER);
					}
				}
				for (PdfPRow row : table.getRows()) {
					for (PdfPCell cell : row.getCells()) {
						cell.setBorder(Rectangle.BOTTOM);
					}
				}
				
				Double t = 0.0;
				for (int i = 0; i < model.getRowCount(); i++) {
					String thanhTien = model.getValueAt(i, 5).toString();
					t += Double.parseDouble(thanhTien);
				}
				document.add(table);
				document.add(Chunk.NEWLINE);
				String tongTien = "Tổng Tiền: " + t.toString() + " VNĐ";
				

				Paragraph TongTien = new Paragraph(tongTien, unicodeFontObject);
				TongTien.setAlignment(Element.ALIGN_RIGHT);
				document.add(TongTien);


				// Tạo một đối tượng Phrase để chứa các đoạn văn bản 
				
				document.add(Chunk.NEWLINE);
				Phrase phrase = new Phrase();

				// Đoạn văn bản "Người lập phiếu"
				Chunk chunk1 = new Chunk("Người lập phiếu ", new com.itextpdf.text.Font(unicodeFont, 12, com.itextpdf.text.Font.BOLD));
				phrase.add(chunk1);

				// Thêm một khoảng trắng giữa các thành phần
				phrase.add(new Chunk("                                              ", new com.itextpdf.text.Font(unicodeFont, 10)));
  
				// Đoạn văn bản "Người giao"
				Chunk chunk2 = new Chunk("Người giao ", new com.itextpdf.text.Font(unicodeFont, 12, com.itextpdf.text.Font.BOLD));
				phrase.add(chunk2);

				
				// Thêm một khoảng trắng giữa các thành phần
				phrase.add(new Chunk("                                                 ", new com.itextpdf.text.Font(unicodeFont, 10)));

				// Đoạn văn bản "Người nhận"
				Chunk chunk3 = new Chunk("Người nhận ", new com.itextpdf.text.Font(unicodeFont, 12, com.itextpdf.text.Font.BOLD));
				phrase.add(chunk3);

				document.add(phrase);

				document.add(Chunk.NEWLINE);
				
				Phrase phrase2 = new Phrase();
				
				// Đoạn văn bản "Chữ ký"
				Chunk chunk4 = new Chunk("    (Ký họ, tên)", new com.itextpdf.text.Font(unicodeFont, 12));
				phrase2.add(chunk4);
				
				// Thêm một khoảng trắng giữa các thành phần
				phrase2.add(new Chunk("                                          ", new com.itextpdf.text.Font(unicodeFont, 12)));
				
				// Đoạn văn bản "Chữ ký"
				Chunk chunk5 = new Chunk("(Ký họ, tên)", new com.itextpdf.text.Font(unicodeFont, 12));
				phrase2.add(chunk5);
				
				// Thêm một khoảng trắng giữa các thành phần
				phrase2.add(new Chunk("                                         ", new com.itextpdf.text.Font(unicodeFont, 12)));
				
				// Đoạn văn bản "Chữ ký"
				Chunk chunk6 = new Chunk("(Ký họ, tên)", new com.itextpdf.text.Font(unicodeFont, 12));
				phrase2.add(chunk6);
				
				document.add(phrase2);
				

				

				document.close();
				JOptionPane.showMessageDialog(this, "In thành công!");
			} catch (DocumentException | FileNotFoundException | MalformedURLException e1) {
				// TODO: handle exception
				e1.printStackTrace();
			} catch (IOException e1) {
				e1.printStackTrace();
			}

		}
		if (o.equals(btnInChiTiet)) {

//			// Lấy mã phiếu nhập
//			int row = table.getSelectedRow();
//			if (row == -1) {
//				JOptionPane.showMessageDialog(this, "Chọn phiếu nhập cần in chi tiết!");
//				return;
//			}
//			String maPhieuNhap = "data/";
//			maPhieuNhap += table.getValueAt(row, 0).toString();
//			// In danh sách chi tiết phiếu nhập
//			maPhieuNhap += ".xlsx";
//			inPhieuNhap(table2, maPhieuNhap);
//			
//			try {
//				inPDF(maPhieuNhap);
//			} catch (JRException e1) {
//				JOptionPane.showMessageDialog(this, "In file pdf thất bại!");
//			}
//
		}
		if (o.equals(btnLamMoi)) {
			try {
				hienTable();
			} catch (RemoteException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}

	}

//	private void inPDF(String maPhieuNhap) throws JRException {
//		try {
//			// Kết nối CSDL (nếu cần)
//			Connection conn = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=QuanLyThuoc",
//					"sa", "sapassword");
//
//			// Đường dẫn đến tệp mẫu .jasper
//			String jasperFile = "src/jasper/Blank_A4_Landscape.jasper";
//
//			// Biến dữ liệu, nếu cần
//			HashMap<String, Object> params = new HashMap<>();
//
//			// Tạo báo cáo
//			JasperReport jasperReport = JasperCompileManager.compileReport(jasperFile);
//			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params, conn);
//
//			// Export báo cáo ra file PDF
//			JasperExportManager.exportReportToPdfFile(jasperPrint, "data/report.pdf");
//
//			System.out.println("Báo cáo đã được tạo thành công!");
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//	}
//
//	private void inPhieuNhap(JTable table, String filePath) {
//
//		try {
//			XSSFWorkbook workbook = new XSSFWorkbook();
//			XSSFSheet sheet = workbook.createSheet("Sheet1");
//
//			DefaultTableModel model = (DefaultTableModel) table.getModel();
//
//			// Lấy header
//			Row headerRow = ((XSSFSheet) sheet).createRow(0);
//			for (int col = 0; col < model.getColumnCount(); col++) {
//				Cell cell = headerRow.createCell(col);
//				cell.setCellValue(model.getColumnName(col));
//			}
//
//			// Lấy data
//			for (int row = 0; row < model.getRowCount(); row++) {
//				Row excelRow = ((XSSFSheet) sheet).createRow(row + 1);
//				for (int col = 0; col < model.getColumnCount(); col++) {
//					Object value = model.getValueAt(row, col);
//					Cell cell = excelRow.createCell(col);
//					if (value != null) {
//						cell.setCellValue(value.toString());
//					}
//				}
//			}
//
//			// Viết vào file
//			FileOutputStream fileOut = new FileOutputStream(filePath);
//			workbook.write(fileOut);
//			fileOut.close();
//			workbook.close();
//
//			JOptionPane.showMessageDialog(this, "In thành công!");
//		} catch (Exception e) {
//			e.printStackTrace();
//			System.out.println("In thất bại!");
//		}
//
//	}

	private boolean checkDaNhan() {
		int row = table.getSelectedRow();
		if (row == -1) {
			JOptionPane.showMessageDialog(this, "Chọn phiếu nhập cần đánh dấu đã nhận!");
			return false;
		}
		String trangThai = table.getValueAt(row, 5).toString();
		if (trangThai.equals("true")) {
			JOptionPane.showMessageDialog(this, "Phiếu nhập đã được đánh dấu đã nhận!");
			return false;
		}
		return true;
	}
		
	

	@Override
	public void mouseClicked(MouseEvent e) {
		// Hiển thị danh sách chi tiết phiếu nhập thuốc
		int row = table.getSelectedRow();

		String maPhieuNhap = table.getValueAt(row, 0).toString();
		
		DefaultTableModel model = (DefaultTableModel) table2.getModel();
		model.setRowCount(0);
		ChiTietPhieuNhapThuoc_Dao ctPNTDao = null;
		try {
			ctPNTDao = new ChiTietPhieuNhapThuoc_Impl();
			List<ChiTietPhieuNhapThuoc> dsCTPNT =  ctPNTDao.readFromTable(maPhieuNhap);
			for (ChiTietPhieuNhapThuoc ctPNT : dsCTPNT) {
				Object[] rowData = { ctPNT.getMaThuoc().getMaThuoc(), ctPNT.getSoLuong(), ctPNT.getGiaNhap(), ctPNT.getHsd(),
						ctPNT.getDonVi(), ctPNT.getThanhTien(), ctPNT.getMaPhieuNhap().getMaPhieuNhap() };
				model.addRow(rowData);
			}
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}
		

	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}

}
